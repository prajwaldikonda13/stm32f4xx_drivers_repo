#include "stm32f407xx_i2c_driver.h"

static void I2C_GenerateStartCondition(uint8_t I2Cx) {
	SET_BIT_N(I2Cx_ptr(I2Cx)->CR1, I2C_CR1_START);
}

static void I2C_ExecuteAddressPhase(uint8_t I2Cx, uint8_t SlaveAddr,
		uint8_t RnW) {
	I2Cx_ptr(I2Cx)->DR = (SlaveAddr << 1) | (RnW & 1); //We need only one bit value,so we take LSB only.
}

static void I2C_SB_EV(I2C_Handle_t I2CHandle) {
	//The interrupt is generated because of SB event
	//This block will not be executed in slave mode because for slave SB is always zero
	//In this block lets executed the address phase
	if (I2CHandle.TxRxState == I2C_BUSY_IN_TX) {
		I2C_ExecuteAddressPhase(I2CHandle.I2Cx, I2CHandle.DevAddr, 0);

	} else if (I2CHandle.TxRxState == I2C_BUSY_IN_RX) {
		I2C_ExecuteAddressPhase(I2CHandle.I2Cx, I2CHandle.DevAddr, 1);

	}

}

static void I2C_ADDR_EV(I2C_Handle_t I2CHandle) {
	//check for device mode
	void(*fptr[])(I2C_Handle_t)={I2C_ADDR_SlvClear,I2C_ADDR_MstrClear};
	fptr[GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR2_MSL)](I2CHandle);
}
static void I2C_ADDR_MstrClear(I2C_Handle_t I2CHandle) {
	if (I2CHandle.TxRxState == I2C_BUSY_IN_RX) {
		if (I2CHandle.RxSize == 1) {
			//first disable the ack
			I2C_ManageAcking(I2CHandle.I2Cx, DISABLE);

			//clear the ADDR flag ( read SR1 , read SR2)
			I2Cx_ptr(I2CHandle.I2Cx)->SR1;
			I2Cx_ptr(I2CHandle.I2Cx)->SR2;
		}

	} else {
		//clear the ADDR flag ( read SR1 , read SR2)
		I2Cx_ptr(I2CHandle.I2Cx)->SR1;
		I2Cx_ptr(I2CHandle.I2Cx)->SR2;
	}
}
static void I2C_ADDR_SlvClear(I2C_Handle_t I2CHandle) {
	I2Cx_ptr(I2CHandle.I2Cx)->SR1;
	I2Cx_ptr(I2CHandle.I2Cx)->SR2;
}
static void I2C_BTF_EV(I2C_Handle_t I2CHandle) {
	if (I2CHandle.TxRxState == I2C_BUSY_IN_TX) {
		//make sure that TXE is also set .
		if (GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_TXE)) {
			//BTF, TXE = 1
			if (I2CHandle.TxLen == 0) {
				//1. generate the STOP condition
				if (I2CHandle.Sr == I2C_DISABLE_SR)
					I2C_GenerateStopCondition(I2CHandle.I2Cx);

				//2. reset all the member elements of the handle structure.
				I2C_CloseSendData(I2CHandle);

				//3. notify the application about transmission complete
				I2C_ApplicationEventCallback(I2CHandle, I2C_EV_TX_CMPLT);
			}
		}

	} else if (I2CHandle.TxRxState == I2C_BUSY_IN_RX) {
		;
	}
}
static void I2C_ADD10_EV() {

}
static void I2C_STOPF_EV(I2C_Handle_t I2CHandle) {
	//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )

	I2Cx_ptr(I2CHandle.I2Cx)->CR1 |= 0x0000;

	//Notify the application that STOP is detected
	I2C_ApplicationEventCallback(I2CHandle, I2C_EV_STOP);
}

static void I2C_RXNE_EV(I2C_Handle_t I2CHandle) {
	//check device mode .

	if (GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR2_MSL)) {
		//The device is master
		//RXNE flag is set
		if (I2CHandle.TxRxState == I2C_BUSY_IN_RX) {
			I2C_MasterHandleRXNEInterrupt(I2CHandle);
		}

	} else {
		//slave
		//make sure that the slave is really in receiver mode

		if (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR2_TRA)) {
			I2C_ApplicationEventCallback(I2CHandle, I2C_EV_DATA_RCV);
		}
	}

}

static void I2C_TXE_EV(I2C_Handle_t I2CHandle) {
	//Check for device mode

	if (GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR2_MSL)) {
		//TXE flag is set
		//We have to do the data transmission
		if (I2CHandle.TxRxState == I2C_BUSY_IN_TX) {
			I2C_MasterHandleTXEInterrupt(I2CHandle);
		}
	} else {
		//slave
		//make sure that the slave is really in transmitter mode

		if (GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR2_TRA)) {
			I2C_ApplicationEventCallback(I2CHandle, I2C_EV_DATA_REQ);
		}
	}

}

static void I2C_BERR_EV(I2C_Handle_t I2CHandle) {
	//Implement the code to clear the buss error flag
	CLR_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1,I2C_SR1_BERR);

	//Implement the code to notify the application about the error
	I2C_ApplicationEventCallback(I2CHandle, I2C_ERROR_BERR);

}
static void I2C_ARLO_EV(I2C_Handle_t I2CHandle) {
	//Implement the code to clear the arbitration lost error flag
	CLR_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1,I2C_SR1_ARLO);

	//Implement the code to notify the application about the error
	I2C_ApplicationEventCallback(I2CHandle, I2C_ERROR_ARLO);
}
static void I2C_AF_EV(I2C_Handle_t I2CHandle) {
	//Implement the code to clear the ACK failure error flag
	CLR_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1,I2C_SR1_AF);

	//Implement the code to notify the application about the error
	I2C_ApplicationEventCallback(I2CHandle, I2C_ERROR_AF);

}

static void I2C_OVR_EV(I2C_Handle_t I2CHandle) {
	//Implement the code to clear the Overrun/underrun error flag
	CLR_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1,I2C_SR1_OVR);

	//Implement the code to notify the application about the error
	I2C_ApplicationEventCallback(I2CHandle, I2C_ERROR_OVR);

}
static void I2C_PECERR_EV(I2C_Handle_t I2CHandle) {

}
static void I2C_TIMEOUT_EV(I2C_Handle_t I2CHandle) {
	//Implement the code to clear the Time out error flag
	CLR_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1,I2C_SR1_TIMEOUT);

	//Implement the code to notify the application about the error
	I2C_ApplicationEventCallback(I2CHandle, I2C_ERROR_TIMEOUT);

}
static void I2C_SMBALERT_EV() {

}

void I2C_GenerateStopCondition(uint8_t I2Cx) {
	SET_BIT_N(I2Cx_ptr(I2Cx)->CR1, I2C_CR1_STOP);
}

void I2C_SlaveEnableDisableCallbackEvents(uint8_t I2Cx, uint8_t State) {
	if (State) {
		MODIFY_KBITS(I2Cx_ptr(I2Cx)->CR2, 3, I2C_CR2_ITERREN, 7);
	} else {
		MODIFY_KBITS(I2Cx_ptr(I2Cx)->CR2, 3, I2C_CR2_ITERREN, 0);
	}
}

/*********************************************************************
 * @fn      		  - I2C_PeripheralControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void I2C_PeripheralControl(uint8_t I2Cx, uint8_t State) {
	MODIFY_BIT_N(I2Cx_ptr(I2Cx)->CR1, I2C_CR1_PE, State);
}

/*********************************************************************
 * @fn      		  - I2C_PeriClockControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
/*********************************************************************
 * @fn      		  - I2C_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t I2CHandle) {

	//enable the clock for the i2cx peripheral
	RCC_APB1_PER_CLK_CTRL(I2CHandle.I2Cx, ENABLE);

	//ack control bit
	MODIFY_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->CR1, I2C_CR1_ACK,
			I2CHandle.I2C_Config.I2C_AckControl);

	//configure the FREQ field of CR2

	MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CR2, 6, 0,
			RCC_GetPCLK1Value() / 1000000U);

	//program the device own address
	SET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->OAR1, 14); //According to reference manual this bit must be set to 1.
	MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->OAR1, 7, I2C_OAR_ADDR,
			I2CHandle.I2C_Config.I2C_DeviceAddress);

	//CCR calculations
	ConfigureCCRVal(I2CHandle);

	//TRISE Configuration
	ConfigureTRISEVal(I2CHandle);

}
static void ConfigureCCRVal(I2C_Handle_t I2CHandle) {
	if (I2CHandle.I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
		//mode is standard mode
		MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CCR, 12, 0,
				RCC_GetPCLK1Value() / MUL2PK(I2CHandle.I2C_Config.I2C_SCLSpeed,1));
	} else {
		//mode is fast mode
		SET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->CCR, I2C_CCR_F_S);
		uint8_t mulFact[] = { 3, 25 };
		MODIFY_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->CCR, I2C_CCR_DUTY,
				I2CHandle.I2C_Config.I2C_FMDutyCycle);
		if (I2CHandle.I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) {
			MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CCR, 12, 0,
					RCC_GetPCLK1Value()
							/ (mulFact[I2CHandle.I2C_Config.I2C_FMDutyCycle]
									* I2CHandle.I2C_Config.I2C_SCLSpeed));
		}
	}
}
static void ConfigureTRISEVal(I2C_Handle_t I2CHandle) {
	if (I2CHandle.I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
		//mode is standard mode
		MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->TRISE, 6, 0,
				(RCC_GetPCLK1Value() / 1000000U) + 1);
	} else {
		//mode is fast mode
		MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->TRISE, 6, 0,
				((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1);
	}
}
/*********************************************************************
 * @fn      		  - I2C_DeInit
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void I2C_DeInit(uint8_t I2Cx) {

}

void I2C_MasterSendData(I2C_Handle_t I2CHandle, uint8_t *pTxbuffer,
		uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
	// 1. Generate the START condition
	I2C_GenerateStartCondition(I2CHandle.I2Cx);

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_SB))
		;

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhase(I2CHandle.I2Cx, SlaveAddr, 0);

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_ADDR))
		;

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ADDR_EV(I2CHandle);

	//6. send the data until len becomes 0

	while (Len > 0) {
		while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR2, I2C_SR1_TXE))
			; //Wait till TXE is set
		I2Cx_ptr(I2CHandle.I2Cx)->DR = *pTxbuffer;
		pTxbuffer++;
		Len--;
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while (!GET_BIT_N(I2CHandle.I2Cx, I2C_SR1_TXE))
		;

	while (!GET_BIT_N(I2CHandle.I2Cx, I2C_SR1_BTF))
		;

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if (Sr == I2C_DISABLE_SR)
		I2C_GenerateStopCondition(I2CHandle.I2Cx);

}

void I2C_MasterReceiveData(I2C_Handle_t I2CHandle, uint8_t *pRxBuffer,
		uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {

	//1. Generate the START condition
	I2C_GenerateStartCondition(I2CHandle.I2Cx);

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_SB))
		;

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhase(I2CHandle.I2Cx, SlaveAddr, 1);

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_ADDR))
		;

	//procedure to read only 1 byte from slave
	if (Len == 1) {
		//Disable Acking
		I2C_ManageAcking(I2CHandle.I2Cx, I2C_ACK_DISABLE);

		//clear the ADDR flag
		I2C_ADDR_EV(I2CHandle);

		//wait until  RXNE becomes 1
		while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_RXNE))
			;

		//generate STOP condition
		if (Sr == I2C_DISABLE_SR)
			I2C_GenerateStopCondition(I2CHandle.I2Cx);

		//read data in to buffer
		*pRxBuffer = I2Cx_ptr(I2CHandle.I2Cx)->DR;

	}

	//procedure to read data from slave when Len > 1
	if (Len > 1) {
		//clear the ADDR flag
		I2C_ADDR_EV(I2CHandle);

		//read the data until Len becomes zero
		for (uint32_t i = Len; i > 0; i--) {
			//wait until RXNE becomes 1
			while (!GET_BIT_N(I2Cx_ptr(I2CHandle.I2Cx)->SR1, I2C_SR1_RXNE))
				;

			if (i == 2) //if last 2 bytes are remaining
					{
				//Disable Acking
				I2C_ManageAcking(I2CHandle.I2Cx, I2C_ACK_DISABLE);

				//generate STOP condition
				if (Sr == I2C_DISABLE_SR)
					I2C_GenerateStopCondition(I2CHandle.I2Cx);

			}

			//read the data from data register in to buffer
			*pRxBuffer = I2Cx_ptr(I2CHandle.I2Cx)->DR;

			//increment the buffer address
			pRxBuffer++;

		}

	}

	//re-enable ACKing
	if (I2CHandle.I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) {
		I2C_ManageAcking(I2CHandle.I2Cx, I2C_ACK_ENABLE);
	}

}

void I2C_ManageAcking(uint8_t I2Cx, uint8_t State) {
	MODIFY_BIT_N(I2Cx_ptr(I2Cx)->CR1, I2C_CR1_ACK, State);
}

/*********************************************************************
 * @fn      		  - I2C_IRQInterruptConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t State) {
//	NVIC_INTR_CTRL(IRQNumber, State);
	NVIC_INTR_CTRL(IRQNumber, State);
}

/*********************************************************************
 * @fn      		  - I2C_IRQPriorityConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
	NVIC_INTR_PR_CTRL(IRQNumber, IRQPriority);
}

/*********************************************************************
 * @fn      		  - I2C_MasterSendDataIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t I2CHandle, uint8_t *pTxBuffer,
		uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
	uint8_t busystate = I2CHandle.TxRxState;

	if ((busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)) {
		I2CHandle.pTxBuffer = pTxBuffer;
		I2CHandle.TxLen = Len;
		I2CHandle.TxRxState = I2C_BUSY_IN_TX;
		I2CHandle.DevAddr = SlaveAddr;
		I2CHandle.Sr = Sr;

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(I2CHandle.I2Cx);

		MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CR2, 3, I2C_CR2_ITERREN, 7); //Enable Interrupts

	}

	return busystate;
}

/*********************************************************************
 * @fn      		  - I2C_MasterReceiveDataIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t I2CHandle, uint8_t *pRxBuffer,
		uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
	uint8_t busystate = I2CHandle.TxRxState;

	if ((busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)) {
		I2CHandle.pRxBuffer = pRxBuffer;
		I2CHandle.RxLen = Len;
		I2CHandle.TxRxState = I2C_BUSY_IN_RX;
		I2CHandle.RxSize = Len;
		I2CHandle.DevAddr = SlaveAddr;
		I2CHandle.Sr = Sr;

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(I2CHandle.I2Cx);

		MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CR2, 3, I2C_CR2_ITERREN, 7); //Enable Interrupts
	}

	return busystate;
}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t I2CHandle) {

	if (I2CHandle.TxLen > 0) {
		//1. load the data in to DR
		I2Cx_ptr(I2CHandle.I2Cx)->DR = *(I2CHandle.pTxBuffer);

		//2. decrement the TxLen
		I2CHandle.TxLen--;

		//3. Increment the buffer address
		I2CHandle.pTxBuffer++;

	}

}

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t I2CHandle) {
	//We have to do the data reception
	if (I2CHandle.RxSize == 1) {
		*I2CHandle.pRxBuffer = I2Cx_ptr(I2CHandle.I2Cx)->DR;
		I2CHandle.RxLen--;

	}

	if (I2CHandle.RxSize > 1) {
		if (I2CHandle.RxLen == 2) {
			//clear the ack bit
			I2C_ManageAcking(I2CHandle.I2Cx, DISABLE);
		}

		//read DR
		*I2CHandle.pRxBuffer = I2Cx_ptr(I2CHandle.I2Cx)->DR;
		I2CHandle.pRxBuffer++;
		I2CHandle.RxLen--;
	}

	if (I2CHandle.RxLen == 0) {
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if (I2CHandle.Sr == I2C_DISABLE_SR)
			I2C_GenerateStopCondition(I2CHandle.I2Cx);

		//2 . Close the I2C rx
		I2C_CloseReceiveData(I2CHandle);

		//3. Notify the application
		I2C_ApplicationEventCallback(I2CHandle, I2C_EV_RX_CMPLT);
	}
}

void I2C_CloseReceiveData(I2C_Handle_t I2CHandle) {
	//Implement the code to disable ITBUFEN & ITEVFEN Control Bit but not ITEVERR
	MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CR2, 2, I2C_CR2_ITEVTEN, 0);

	I2CHandle.TxRxState = I2C_READY;
	I2CHandle.pRxBuffer = NULL;
	I2CHandle.RxLen = 0;
	I2CHandle.RxSize = 0;

	if (I2CHandle.I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) {
		I2C_ManageAcking(I2CHandle.I2Cx, ENABLE);
	}

}

void I2C_CloseSendData(I2C_Handle_t I2CHandle) {
	//Implement the code to disable ITBUFEN & ITEVFEN Control Bit but not ITEVERR
	MODIFY_KBITS(I2Cx_ptr(I2CHandle.I2Cx)->CR2, 2, I2C_CR2_ITEVTEN, 0);

	I2CHandle.TxRxState = I2C_READY;
	I2CHandle.pTxBuffer = NULL;
	I2CHandle.TxLen = 0;
}

void I2C_SlaveSendData(uint8_t I2Cx, uint8_t data) {
	I2Cx_ptr(I2Cx)->DR = data;
}

uint8_t I2C_SlaveReceiveData(uint8_t I2Cx) {
	return (uint8_t) I2Cx_ptr(I2Cx)->DR;
}
static void I2C_NULL_EV(I2C_Handle_t I2CHandle) {

}
void I2C_EV_IRQHandling(I2C_Handle_t I2CHandle) {
	void (*fptr[])(I2C_Handle_t)= {
		I2C_SB_EV,
		I2C_ADDR_EV,
		I2C_BTF_EV,
		I2C_ADD10_EV,
		I2C_STOPF_EV,
		I2C_NULL_EV,
		I2C_RXNE_EV,
		I2C_TXE_EV,
		I2C_BERR_EV,
		I2C_ARLO_EV,
		I2C_AF_EV,
		I2C_OVR_EV,
		I2C_PECERR_EV,
		I2C_NULL_EV,
		I2C_TIMEOUT_EV,
		I2C_SMBALERT_EV,
	};
	fptr[GetLSBSetBit(I2Cx_ptr(I2CHandle.I2Cx)->SR1)](I2CHandle);
}


void I2C_ER_IRQHandling(I2C_Handle_t I2CHandle) {
	I2C_EV_IRQHandling(I2CHandle);
}

