#ifndef INC_STM3F407XX_H_
#define INC_STM3F407XX_H_


#include"stdio.h"

#define __weak __attribute__((weak))



typedef volatile unsigned int vuint32_t;
typedef volatile unsigned short int vuint16_t;
typedef volatile unsigned char vuint8_t;




uint8_t GetLSBSetBit(uint32_t Val);

/*
 * base addresses of peripherals
 */


#define TIM2_BASE_ADDR								0x40000000
#define TIM3_BASE_ADDR								0x40000400
#define TIM4_BASE_ADDR								0x40000800
#define TIM5_BASE_ADDR								0x40000C00
#define TIM6_BASE_ADDR								0x40001000
#define TIM7_BASE_ADDR								0x40001400
#define TIM12_BASE_ADDR								0x40001800
#define TIM13_BASE_ADDR								0x40001C00
#define TIM14_BASE_ADDR								0x40002000
#define RESERVED0_BASE_ADDR							0x40002400
#define RTC_N_BKP_REGS_BASE_ADDR					0x40002800
#define WWDG_BASE_ADDR								0x40002C00
#define IWDG_BASE_ADDR								0x40003000
#define I2S2EXT_BASE_ADDR							0x40003400
#define SPI2_I2S2_BASE_ADDR							0x40003800
#define SPI3I2S3_BASE_ADDR							0x40003C00
#define I2S3EXT_BASE_ADDR							0x40004000
#define USART2_BASE_ADDR							0x40004400
#define USART3_BASE_ADDR							0x40004800
#define UART4_BASE_ADDR								0x40004C00
#define UART5_BASE_ADDR								0x40005000
#define I2C1_BASE_ADDR								0x40005400
#define I2C2_BASE_ADDR								0x40005800
#define I2C3_BASE_ADDR								0x40005C00
#define RESERVED1_BASE_ADDR							0x40006000
#define CAN1_BASE_ADDR								0x40006400
#define CAN2_BASE_ADDR								0x40006800
#define RESERVED2_BASE_ADDR							0x40006C00
#define PWR_BASE_ADDR								0x40007000
#define DAC_BASE_ADDR								0x40007400
#define RESERVED3_BASE_ADDR							0x40007800
#define RESERVED4_BASE_ADDR							0x40007800
#define TIM1_BASE_ADDR								0x40010000
#define TIM8_BASE_ADDR								0x40010400
#define RESERVED5_BASE_ADDR							0x40010800
#define USART1_BASE_ADDR							0x40011000
#define USART6_BASE_ADDR							0x40011400
#define RESERVED6_BASE_ADDR							0x40011800
#define ADC1_ADC2_ADC3_BASE_ADDR					0x40012000
#define RESERVED7_BASE_ADDR							0x40012400
#define SDIO_BASE_ADDR								0x40012C00
#define SPI1_BASE_ADDR								0x40013000
#define RESERVED8_BASE_ADDR							0x40013400
#define SYSCFG_BASE_ADDR							0x40013800
#define EXTI_BASE_ADDR								0x40013C00
#define TIM9_BASE_ADDR								0x40014000
#define TIM10_BASE_ADDR								0x40014400
#define TIM11_BASE_ADDR								0x40014800
#define RESERVED9_BASE_ADDR							0x40014C00
#define RESERVED10_BASE_ADDR						0x40015800
#define GPIOA_BASE_ADDR								0x40020000
#define GPIOB_BASE_ADDR								0x40020400
#define GPIOC_BASE_ADDR								0x40020800
#define GPIOD_BASE_ADDR								0x40020C00
#define GPIOE_BASE_ADDR								0x40021000
#define GPIOF_BASE_ADDR								0x40021400
#define GPIOG_BASE_ADDR								0x40021800
#define GPIOH_BASE_ADDR								0x40021C00
#define GPIOI_BASE_ADDR								0x40022000
#define RESERVED11_BASE_ADDR						0x40022400
#define CRC_BASE_ADDR								0x40023000
#define RESERVED12_BASE_ADDR						0x40023400
#define RCC_BASE_ADDR								0x40023800
#define FLASH_INTERFACE_REG_BASE_ADDR				0x40023C00
#define BKPSRAM_BASE_ADDR							0x40024000
#define RESERVED13_BASE_ADDR						0x40025000
#define DMA1_BASE_ADDR								0x40026000
#define DMA2_BASE_ADDR								0x40026400
#define RESERVED14_BASE_ADDR						0x40026800
#define ETHERNET_MAC0_BASE_ADDR						0x40028000
#define ETHERNET_MAC1_BASE_ADDR						0x40028400
#define ETHERNET_MAC2_BASE_ADDR						0x40028800
#define ETHERNET_MAC3_BASE_ADDR						0x40028C00
#define ETHERNET_MAC4_BASE_ADDR						0x40029000
#define RESERVED15_BASE_ADDR						0x40029400
#define USB_OTG_HS_BASE_ADDR						0x40040000
#define RESERVED16_BASE_ADDR						0x40080000
#define USB_OTG_FS_BASE_ADDR						0x50000000
#define RESERVED17_BASE_ADDR						0x50040000
#define DCMI_BASE_ADDR								0x50050000
#define RESERVED18_BASE_ADDR						0x50050400
#define RNG_BASE_ADDR								0x50060800
#define RESERVED19_BASE_ADDR						0x50060C00
#define FSMC_BANK1_BASE_ADDR						0x60000000
#define FSMC_BANK2_BASE_ADDR						0x70000000
#define FSMC_BANK3_BASE_ADDR						0x80000000
#define FSMC_BANK4_BASE_ADDR						0x90000000
#define FSMC_CTRL_REG_BASE_ADDR						0xA0000000
#define RESERVED20_BASE_ADDR						0xA0001000
#define CORTEX_M4_INTERNAL_PERIPHERALS_BASE_ADDR	0xE0000000
#define RESERVED21_BASE_ADDR						0xE00FFFFF


enum Peripherals_en {
	TIM2, //0
	TIM3, //1
	TIM4, //2
	TIM5, //3
	TIM6, //4
	TIM7, //5
	TIM12, //6
	TIM13, //7
	TIM14, //8
	RESERVED0, //9
	RTC_N_BKP_REGS, //10
	WWDG, //11
	IWDG, //12
	I2S2EXT, //13
	SPI2,//14
	I2S2=14, //14
	SPI3,//15
	I2S3=15, //15
	I2S3EXT, //16
	USART2, //17
	USART3, //18
	UART4, //19
	UART5, //20
	I2C1, //21
	I2C2, //22
	I2C3, //23
	RESERVED1, //24
	CAN1, //25
	CAN2, //26
	RESERVED2, //27
	PWR, //28
	DAC, //29
	RESERVED3, //30
	RESERVED4, //31
	TIM1, //32
	TIM8, //33
	RESERVED5, //34
	USART1, //35
	USART6, //36
	RESERVED6, //37
	ADC1,//38
	ADC2=38,//38
	ADC3=38, //38
	RESERVED7, //39
	SDIO, //40
	SPI1, //41
	RESERVED8, //42
	SYSCFG, //43
	EXTI, //44
	TIM9, //45
	TIM10, //46
	TIM11, //47
	RESERVED9, //48
	RESERVED10, //49
	GPIOA, //50
	GPIOB, //51
	GPIOC, //
	GPIOD, //
	GPIOE, //
	GPIOF, //
	GPIOG, //
	GPIOH, //
	GPIOI, //
	RESERVED11, //
	CRC, //
	RESERVED12, //
	RCC, //
	FLASH_INTERFACE_REG, //
	BKPSRAM, //
	RESERVED13, //
	DMA1, //
	DMA2, //
	RESERVED14, //
	ETHERNET_MAC, //
	RESERVED15, //
	USB_OTG_HS, //
	RESERVED16, //
	USB_OTG_FS, //
	RESERVED17, //
	DCMI, //
	RESERVED18, //
	RNG, //
	RESERVED19, //
	FSMC_BANK1, //
	FSMC_BANK2, //
	FSMC_BANK3, //
	FSMC_BANK4, //
	FSMC_CTRL_REG, //
	RESERVED20, //
	CORTEX_M4_INTERNAL_PERIPHERALS, //
	RESERVED21 //
};
enum STATE_x_en {
	OFF,
	ON,
	RST=OFF,
	SET,
	CLR=RST,
	DISABLE=OFF,
	ENABLE,
	FALSE=OFF,
	TRUE
};

enum IRQ_PRx_en{
	IRQ_PR0,
	IRQ_PR1,
	IRQ_PR2,
	IRQ_PR3,
	IRQ_PR4,
	IRQ_PR5,
	IRQ_PR6,
	IRQ_PR7,
	IRQ_PR8,
	IRQ_PR9,
	IRQ_PR10,
	IRQ_PR11,
	IRQ_PR12,
	IRQ_PR13,
	IRQ_PR14,
	IRQ_PR15,
//There are total of 255 priorities in NVIC according to Cortex-M4 Generic User Guide.We have taken only 16.
};

enum IRQx_x_en
{
	IRQ0_WWDG_INTR,//WINDOW WATCHDOG INTERRUPT
	IRQ1_PVD,//PVD THROUGH EXTIN LINE DETECTION INTERRUPT
	IRQ2_TAMP_STAMP,//TAMPER AND TIMESTAMP INTERRUPTS THROUGH EXTI LINE
	IRQ3_RTC_WKUP,//RTC WAKEUP INTERRUPT THROUGH EXTI LINE
	IRQ4_FLASH,//FLASH GLOBAL INTERRUPT
	IRQ5_RCC,//RCC GLOBAL INTERRUPT
	IRQ6_EXTI0,//EXTI LINE0 INTERRUPT
	IRQ7_EXTI1,//EXTI LINE1 INTERRUPT
	IRQ8_EXTI2,//EXTI LINE2 INTERRUPT
	IRQ9_EXTI3,//EXTI LINE3 INTERRUPT
	IRQ10_EXTI4,//EXTI LINE4 INTERRUPT
	IRQ11_DMA1_STREAM0,//DMA1 STREAM0 GLOBAL INTERRUPT
	IRQ12_DMA1_STREAM1,//DMA1 STREAM1 GLOBAL INTERRUPT
	IRQ13_DMA1_STREAM2,//DMA1 STREAM2 GLOBAL INTERRUPT
	IRQ14_DMA1_STREAM3,//DMA1 STREAM3 GLOBAL INTERRUPT
	IRQ15_DMA1_STREAM4,//DMA1 STREAM4 GLOBAL INTERRUPT
	IRQ16_DMA1_STREAM5,//DMA1 STREAM5 GLOBAL INTERRUPT
	IRQ17_DMA1_STREAM6,//DMA1 STREAM6 GLOBAL INTERRUPT
	IRQ18_ADC,//ADC1,ADC2,ADC3 GLOBAL INTERRUPTS
	IRQ19_CAN1_TX,//CAN1 TX INTERRUPTS
	IRQ20_CAN1_RX0,//CAN1 RX0 INTERRUPTS
	IRQ21_CAN1_RX1,//CAN1 RX1 INTERRUPT
	IRQ22_CAN1_SCE,//CAN1 SCE INTERRUPT
	IRQ23_EXTI_9_5,//EXTI LINE[9:5] INTERRUPTS
	IRQ24_TIM1_BRK_TIM9,//TIM1 BREAK INTERRUPT AND TIM9 GLOBAL INTERRUPT
	IRQ25_TIM1_UP_TIM10,//TIM1 UPDATE INTERRUPT AND TIM10 GLOBAL INTERRUPT
	IRQ26_TIM1_TRG_COM_TIM11,//TIM1 TRIGGER AND COMMUNICATION INTERRUPTS AND TIM11 GLOBAL INTERRUPT
	IRQ27_TIM1_CC,//TIM1 CAPTURE COMPARE INTERRUPT
	IRQ28_TIM2,//TIM2 GLOBAL INTERRUPT
	IRQ29_TIM3,//TIM3 GLOBAL INTERRUPT
	IRQ30_TIM4,//TIM4 GLOBAL INTERRUPT
	IRQ31_I2C1_EV,//I2C1 EVENT INTERRUPT
	IRQ32_I2C1_ER,//I2C1 ERROR INTERRUPT
	IRQ33_I2C2_EV,//I2C2 EVENT INTERRUPT
	IRQ34_I2C2_ER,//I2C2 ERROR INTERRUPT
	IRQ35_SPI1,//SPI1 GLOBAL INTERRUPT
	IRQ36_SPI2,//SPI2 GLOBAL INTERRUPT
	IRQ37_USART1,//USART1 GLOBAL INTERRUPT
	IRQ38_USART2,//USART2 GLOBAL INTERRUPT
	IRQ39_USART3,//USART3 GLOBAL INTERRUPT
	IRQ40_EXTI_15_10,//EXTI LINE[15:10] INTERRUPTS
	IRQ41_RTC_ALARM,//RTC ALARMS(A AND B) THROUGH EXTI LINE INTERRUPT
	IRQ42_OTG_FS_WKUP,//USB ON THE GO FS WAKEUP THROUGH EXTI LINE INTERRUPT
	IRQ43_TIM8_BRK_IM12,//TIM8 BREAK INTERUPT AND TIM12 GLOBAL INTERRUPT
	IRQ44_TIM8_UP_TIM13,//TIM8 UPDATE INTERRUPT AND TIM13 GLOBAL INTERRUPT
	IRQ45_TIM8_TRG_COM_TIM14,//TIM8 TRIGGER AND COMMUNICATION INTERRUPTS AND TIM14 GLOBAL INTERRUPTS
	IRQ46_TIM8_CC,//TIM8 CAPTURE COMPARE INTERRUPT
	IRQ47_DMA1_STREAM7,//DMA1 STREAM7 GLOBAL INTERRUPT
	IRQ48_FSMC,//FSMC_GLOBAL_INTERRUPT
	IRQ49_SDIO,//SDIO GLOBAL INTERRUPT
	IRQ50_TIM5,//TIM5 GLOBAL INTERRUPT
	IRQ51_SPI3,//SPI3 GLOBAL INTERRUPT
	IRQ52_UART4,//UART4 GLOBAL INTERRUPT
	IRQ53_UART5,//UART5 GLOBAL INTERRUPT
	IRQ54_TIM6_DAC,//TIM6 GLOBAL INTERRUPT AND DAC1 AND DAC2 UNDERRUN ERROR
	IRQ55_TIM7,//TIM7 GLOBAL INTERRUPT
	IRQ56_DMA2_STREAM0,//DMA2 STREAM0 GLOBAL INTERRUPT
	IRQ57_DMA2_STREAM1,//DMA2 STREAM1 GLOBAL INTERRUPT,
	IRQ58_DMA2_STREAM2,//DMA2 STREAM2 GLOBAL INTERRUPT,
	IRQ59_DMA2_STREAM3,//DMA2 STREAM3 GLOBAL INTERRUPT,
	IRQ60_DMA2_STREAM4,//DMA2 STREAM4 GLOBAL INTERRUPT,
	IRQ61_ETH,//ETHERNET GLOBAL INTERRUPT
	IRQ62_ETH_WKUP,//ETHERNET WAKEUP THROUGH EXTI LINE INTERRUPT
	IRQ63_CAN2_TX,//CAN2 TX INTERRUPTS
	IRQ64_CAN2_RX0,//CAN2 RX0 INTERRUPTS
	IRQ65_CAN2_RX1,//CAN2_RX1 INTERRUPT
	IRQ66_CAN2_SCE,//CAN2 SCE INTERRUPT
	IRQ67_OTG_FS,//USB ON THE GO FS GLOBAL INTERRUPT
	IRQ68_DMA2_STREAM5,//DMA2 STREAM5 GLOBAL INTERRUPT
	IRQ69_DMA2_STREAM6,//DMA2 STREAM6 GLOBAL INTERRUPT
	IRQ70_DMA2_sTREAM7,//DMA2 STREAM7 GLOBAL INTERRUPT
	IRQ71_USART6,//USART6 GLOBAL INTERRUPT
	IRQ72_I2C3_EV,//I2C3 EVENT INTERRUPT
	IRQ73_I2C3_ER,//I2C3 ERROR INTERRUPT
	IRQ74_OTG_HS_EP1_OUT,//USB ON THE GO HS END POINT 1 OUT GLOBAL INTERRUPT
	IRQ75_OTG_HS_EP1_IN,//USB ON THE GO HS END POINT 1 IN GLOBAL INTERRUPT
	IRQ76_OTG_HS_WKUP,//USB ON THE GO HS WAKEUP THROUGH EXTI INTERRUPT
	IRQ77_OTG_HS,//USB ON THE GO HS GLOBAL INTERRUPT
	IRQ78_DCMI,//DCMI GLOBAL INTERRUPT
	IRQ79_CRYP,//CRYP CRYPTO GLOBAL INTERRUPT
	IRQ80_HASH_RNG,//HASH AND RNG GLOBAL INTERRUPT
	IRQ81_FPU,//FPU GLOBAL INTERRUPT

};
uint32_t TEMPVAR;

#define SET_BIT_N(ADDR,N)	((ADDR)|=1<<(N))
#define RST_BIT_N(ADDR,N)	((ADDR)&=~(1<<(N)))
#define CLR_BIT_N			RST_BIT_N
#define TGL_BIT_N(ADDR,N)	((ADDR)^=1<<(N))
#define GET_BIT_N(ADDR,N)	(((ADDR)>>(N))&1)


#define GET_KBITS(ADDR,K,POS)			((ADDR)>>(POS))&(MASK_LST[K-1])
#define RST_KBITS(ADDR,K,POS)			((ADDR)&=~(MASK_LST[K-1]<<(POS)))
#define SET_KBITS(ADDR,K,POS)			((ADDR)|=(MASK_LST[K-1]<<(POS)))

#define MODIFY_BIT_N(ADDR,N,VAL)	TEMPVAR=ADDR;VAL==0?RST_BIT_N(TEMPVAR):SET_BIT_N(TEMPVAR);ADDR=TEMPVAR
#define MODIFY_KBITS(ADDR,K,POS,VAL)	TEMPVAR=ADDR;RST_KBITS(TEMPVAR,K,POS);(TEMPVAR)|=((VAL)<<(POS));ADDR=TEMPVAR

#define DIV2PK(NUM,K)					((NUM)>>(K))//If we divide a binary number at kth position,Then quotient is remaining (n-k) bits.And k bits is remainder.
#define MOD2PK(NUM,K)					((NUM)&(MASK_LST[K-1]))//If we divide a binary number at kth position,Then quotient is remaining (n-k) bits.And k bits is remainder.
#define MUL2PK(NUM,K)					((NUM)<<(K))//Left shift by K means multiply by 2^K.

/**********************************peripheral register definition structures **********************************/

/*
 * Note : Registers of a peripheral are specific to MCU
 * e.g : Number of Registers of SPI peripheral of STM32F4x family of MCUs may be different(more or less)
 * Compared to number of registers of SPI peripheral of STM32Lx or STM32F0x family of MCUs
 * Please check your Device RM
 */








/*
 * peripheral register definition structure for SPI
 */
typedef struct
{
	vuint32_t CR1;        /*!< TODO,     										Address offset: 0x00 */
	vuint32_t CR2;        /*!< TODO,     										Address offset: 0x04 */
	vuint32_t SR;         /*!< TODO,     										Address offset: 0x08 */
	vuint32_t DR;         /*!< TODO,     										Address offset: 0x0C */
	vuint32_t CRCPR;      /*!< TODO,     										Address offset: 0x10 */
	vuint32_t RXCRCR;     /*!< TODO,     										Address offset: 0x14 */
	vuint32_t TXCRCR;     /*!< TODO,     										Address offset: 0x18 */
	vuint32_t I2SCFGR;    /*!< TODO,     										Address offset: 0x1C */
	vuint32_t I2SPR;      /*!< TODO,     										Address offset: 0x20 */
} SPI_RegDef_t;





/*
 * peripheral register definition structure for I2C
 */
typedef struct
{
  vuint32_t CR1;        /*!< TODO,     										Address offset: 0x00 */
  vuint32_t CR2;        /*!< TODO,     										Address offset: 0x04 */
  vuint32_t OAR1;       /*!< TODO,     										Address offset: 0x08 */
  vuint32_t OAR2;       /*!< TODO,     										Address offset: 0x0C */
  vuint32_t DR;         /*!< TODO,     										Address offset: 0x10 */
  vuint32_t SR1;        /*!< TODO,     										Address offset: 0x14 */
  vuint32_t SR2;        /*!< TODO,     										Address offset: 0x18 */
  vuint32_t CCR;        /*!< TODO,     										Address offset: 0x1C */
  vuint32_t TRISE;      /*!< TODO,     										Address offset: 0x20 */
  vuint32_t FLTR;       /*!< TODO,     										Address offset: 0x24 */
}I2C_RegDef_t;

/*
 * peripheral register definition structure for USART
 */
typedef struct
{
	vuint32_t SR;         /*!< TODO,     										Address offset: 0x00 */
	vuint32_t DR;         /*!< TODO,     										Address offset: 0x04 */
	vuint32_t BRR;        /*!< TODO,     										Address offset: 0x08 */
	vuint32_t CR1;        /*!< TODO,     										Address offset: 0x0C */
	vuint32_t CR2;        /*!< TODO,     										Address offset: 0x10 */
	vuint32_t CR3;        /*!< TODO,     										Address offset: 0x14 */
	vuint32_t GTPR;       /*!< TODO,     										Address offset: 0x18 */
} USART_RegDef_t;


















/*
 * IRQ(Interrupt Request) Numbers of STM32F407x MCU
 * NOTE: update these macros with valid values according to your MCU
 * TODO: You may complete this list for other peripherals
 */

#define IRQ_NO_EXTI0 		6
#define IRQ_NO_EXTI1 		7
#define IRQ_NO_EXTI2 		8
#define IRQ_NO_EXTI3 		9
#define IRQ_NO_EXTI4 		10
#define IRQ_NO_EXTI9_5 		23
#define IRQ_NO_EXTI15_10 	40
#define IRQ_NO_SPI1			35
#define IRQ_NO_SPI2         36
#define IRQ_NO_SPI3         51
#define IRQ_NO_SPI4
#define IRQ_NO_I2C1_EV     31
#define IRQ_NO_I2C1_ER     32
#define IRQ_NO_USART1	    37
#define IRQ_NO_USART2	    38
#define IRQ_NO_USART3	    39
#define IRQ_NO_UART4	    52
#define IRQ_NO_UART5	    53
#define IRQ_NO_USART6	    71


/*
 * macros for all the possible priority levels
 */
#define NVIC_IRQ_PRI0    0
#define NVIC_IRQ_PRI15    15


//some generic macros

#define ENABLE 				1
#define DISABLE 			0
#define SET 				ENABLE
#define RESET 				DISABLE
#define GPIO_PIN_SET        SET
#define GPIO_PIN_RESET      RESET
#define FLAG_RESET         RESET
#define FLAG_SET 			SET


/******************************************************************************************
 *Bit position definitions of SPI peripheral
 ******************************************************************************************/
/*
 * Bit position definitions SPI_CR1
 */
#define SPI_CR1_CPHA     				 0
#define SPI_CR1_CPOL      				 1
#define SPI_CR1_MSTR     				 2
#define SPI_CR1_BR   					 3
#define SPI_CR1_SPE     				 6
#define SPI_CR1_LSBFIRST   			 	 7
#define SPI_CR1_SSI     				 8
#define SPI_CR1_SSM      				 9
#define SPI_CR1_RXONLY      		 	10
#define SPI_CR1_DFF     			 	11
#define SPI_CR1_CRCNEXT   			 	12
#define SPI_CR1_CRCEN   			 	13
#define SPI_CR1_BIDIOE     			 	14
#define SPI_CR1_BIDIMODE      			15

/*
 * Bit position definitions SPI_CR2
 */
#define SPI_CR2_RXDMAEN		 			0
#define SPI_CR2_TXDMAEN				 	1
#define SPI_CR2_SSOE				 	2
#define SPI_CR2_FRF						4
#define SPI_CR2_ERRIE					5
#define SPI_CR2_RXNEIE				 	6
#define SPI_CR2_TXEIE					7


/*
 * Bit position definitions SPI_SR
 */
#define SPI_SR_RXNE						0
#define SPI_SR_TXE				 		1
#define SPI_SR_CHSIDE				 	2
#define SPI_SR_UDR					 	3
#define SPI_SR_CRCERR				 	4
#define SPI_SR_MODF					 	5
#define SPI_SR_OVR					 	6
#define SPI_SR_BSY					 	7
#define SPI_SR_FRE					 	8

/******************************************************************************************
 *Bit position definitions of I2C peripheral
 ******************************************************************************************/
/*
 * Bit position definitions I2C_CR1
 */
#define I2C_CR1_PE						0
#define I2C_CR1_NOSTRETCH  				7
#define I2C_CR1_START 					8
#define I2C_CR1_STOP  				 	9
#define I2C_CR1_ACK 				 	10
#define I2C_CR1_SWRST  				 	15

/*
 * Bit position definitions I2C_CR2
 */
#define I2C_CR2_FREQ				 	0
#define I2C_CR2_ITERREN				 	8
#define I2C_CR2_ITEVTEN				 	9
#define I2C_CR2_ITBUFEN 			    10

/*
 * Bit position definitions I2C_OAR1
 */
#define I2C_OAR1_ADD0    				 0
#define I2C_OAR1_ADD71 				 	 1
#define I2C_OAR1_ADD98  			 	 8
#define I2C_OAR1_ADDMODE   			 	15

/*
 * Bit position definitions I2C_SR1
 */

#define I2C_SR1_SB 					 	0
#define I2C_SR1_ADDR 				 	1
#define I2C_SR1_BTF 					2
#define I2C_SR1_ADD10 					3
#define I2C_SR1_STOPF 					4
#define I2C_SR1_RXNE 					6
#define I2C_SR1_TXE 					7
#define I2C_SR1_BERR 					8
#define I2C_SR1_ARLO 					9
#define I2C_SR1_AF 					 	10
#define I2C_SR1_OVR 					11
#define I2C_SR1_TIMEOUT 				14

/*
 * Bit position definitions I2C_SR2
 */
#define I2C_SR2_MSL						0
#define I2C_SR2_BUSY 					1
#define I2C_SR2_TRA 					2
#define I2C_SR2_GENCALL 				4
#define I2C_SR2_DUALF 					7

/*
 * Bit position definitions I2C_CCR
 */
#define I2C_CCR_CCR 					 0
#define I2C_CCR_DUTY 					14
#define I2C_CCR_FS  				 	15

/******************************************************************************************
 *Bit position definitions of USART peripheral
 ******************************************************************************************/

/*
 * Bit position definitions USART_CR1
 */
#define USART_CR1_SBK					0
#define USART_CR1_RWU 					1
#define USART_CR1_RE  					2
#define USART_CR1_TE 					3
#define USART_CR1_IDLEIE 				4
#define USART_CR1_RXNEIE  				5
#define USART_CR1_TCIE					6
#define USART_CR1_TXEIE					7
#define USART_CR1_PEIE 					8
#define USART_CR1_PS 					9
#define USART_CR1_PCE 					10
#define USART_CR1_WAKE  				11
#define USART_CR1_M 					12
#define USART_CR1_UE 					13
#define USART_CR1_OVER8  				15



/*
 * Bit position definitions USART_CR2
 */
#define USART_CR2_ADD   				0
#define USART_CR2_LBDL   				5
#define USART_CR2_LBDIE  				6
#define USART_CR2_LBCL   				8
#define USART_CR2_CPHA   				9
#define USART_CR2_CPOL   				10
#define USART_CR2_STOP   				12
#define USART_CR2_LINEN   				14


/*
 * Bit position definitions USART_CR3
 */
#define USART_CR3_EIE   				0
#define USART_CR3_IREN   				1
#define USART_CR3_IRLP  				2
#define USART_CR3_HDSEL   				3
#define USART_CR3_NACK   				4
#define USART_CR3_SCEN   				5
#define USART_CR3_DMAR  				6
#define USART_CR3_DMAT   				7
#define USART_CR3_RTSE   				8
#define USART_CR3_CTSE   				9
#define USART_CR3_CTSIE   				10
#define USART_CR3_ONEBIT   				11

/*
 * Bit position definitions USART_SR
 */

#define USART_SR_PE        				0
#define USART_SR_FE        				1
#define USART_SR_NE        				2
#define USART_SR_ORE       				3
#define USART_SR_IDLE       			4
#define USART_SR_RXNE        			5
#define USART_SR_TC        				6
#define USART_SR_TXE        			7
#define USART_SR_LBD        			8
#define USART_SR_CTS        			9

//#include "stm32f407xx_gpio_driver.h"
//#include "stm32f407xx_spi_driver.h"
//#include "stm32f407xx_i2c_driver.h"
//#include "stm32f407xx_usart_driver.h"
//#include "stm32f407xx_rcc_driver.h"
extern uint32_t BASE_ADDR_LST[];
extern uint32_t MASK_LST[];

#endif /* INC_STM3F407XX_H_ */
