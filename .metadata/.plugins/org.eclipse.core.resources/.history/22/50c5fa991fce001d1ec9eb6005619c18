#include "stm32f407xx_usart_driver.h"

/*********************************************************************
 * @fn      		  - USART_SetBaudRate
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_SetBaudRate(uint8_t USARTx, uint32_t BaudRate) {

	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;

	//Get the value of APB bus clock in to the variable PCLKx
	if (USARTx == USART1 || USARTx == USART6) {
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
	} else {
		PCLKx = RCC_GetPCLK1Value();
	}

	//Check for OVER8 configuration bit
	uint8_t pow_Fact[] = { 1, 2 }; //{Over sampling by 8,Over sampling by 16}
	uint8_t ovrSampling8 = GET_BIT_N(USARTx_ptr(USARTx)->CR1, USART_CR1_OVER8);
	usartdiv = ((25 * PCLKx) / MUL2PK(BaudRate, pow_Fact[ovrSampling8]));

	//Calculate the Mantissa part
	M_part = usartdiv / 100;

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));

	//Calculate the final fractional
	uint8_t nBit[] = { 0x7, 0xf };
	F_part = (((F_part * 16) + 50) / 100) & ((uint8_t) nBit[ovrSampling8]);

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;

	//copy the value of tempreg in to BRR register
	USARTx_ptr(USARTx)->BRR = tempreg;
}

/*********************************************************************
 * @fn      		  - USART_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t USARTHandle) {

	//Temporary variable

	/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(USARTHandle.USARTx, ENABLE);

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	USART_Init_ModeConfig(USARTHandle);

	//Implement the code to configure the Word length configuration item
	MODIFY_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1, USART_CR1_M,
			USARTHandle.USART_Config.USART_WordLength);

	//Configuration of parity control bit fields
	USART_Init_ParityConfig(USARTHandle);

	/******************************** Configuration of CR2******************************************/

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	MODIFY_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR2, USART_CR2_STOP,
			USARTHandle.USART_Config.USART_NoOfStopBits);

	/******************************** Configuration of CR3******************************************/

	//Configuration of USART hardware flow control
	USART_Init_HWFlowCtrlConfig(USARTHandle);

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(USARTHandle.USARTx, USARTHandle.USART_Config.USART_Baud);

}
static void USART_Init_ModeConfig(USART_Handle_t USARTHandle) {
	SET_KBITS(USARTx_ptr(USARTHandle.USARTx)->CR1, 2, USART_CR1_RE);//Enable both Tx and Rx modes.
	CLR_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1,USARTHandle.USART_Config.USART_Mode+2);//Disable other bit.
	/* USART_MODE_ONLY_RX=1,USART_CR1_TE=3
	 * USART_MODE_ONLY_TX=0,USART_CR1_RE=2 */
}
static void USART_Init_ParityConfig(USART_Handle_t USARTHandle) {
	if (USARTHandle.USART_Config.USART_ParityControl != USART_PARITY_DISABLE) {
		SET_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1, USART_CR1_PCE);
		MODIFY_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1, USART_CR1_PS,
				USARTHandle.USART_Config.USART_ParityControl - 1);//1 for odd 0 for even
	}
}
static void USART_Init_HWFlowCtrlConfig(USART_Handle_t USARTHandle) {
	if (USARTHandle.USART_Config.USART_HWFlowControl != USART_HW_FLOW_CTRL_NONE) {
		SET_KBITS(USARTx_ptr(USARTHandle.USARTx)->CR3, 2, USART_CR3_RTSE);//Enable CTSE(8) and RTSE(9)
		CLR_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1,USARTHandle.USART_Config.USART_Mode+7);//Disable other bit.
	}
}
/*********************************************************************
 * @fn      		  - USART_EnableOrDisable
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_PeripheralControl(uint8_t USARTx, uint8_t State) {
	MODIFY_BIT_N(USARTx_ptr(USARTx)->CR1, 13, State);
}

/*********************************************************************
 * @fn      		  - I2C_PeriClockControl
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_PeriClockControl(uint8_t USARTx, uint8_t State) {
	if (USARTx == USART1) {
		USART1_PCCK_CTRL(State);
	} else if (USARTx == USART2) {
		USART2_PCCK_CTRL(State);
	} else if (USARTx == USART3) {
		USART3_PCCK_CTRL(State);
	} else if (USARTx == UART4) {
		UART4_PCCK_CTRL(State);
	}

}
/*********************************************************************
 * @fn      		  - USART_GetFlagStatus
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

/*********************************************************************
 * @fn      		  - USART_SendData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t USARTHandle, uint8_t *pTxBuffer,
		uint32_t Len) {

	uint16_t *pdata;

	//Loop over until "Len" number of bytes are transferred
	for (uint32_t i = 0; i < Len; i++) {
		//Implement the code to wait until TXE flag is set in the SR

		while (!GET_BIT_N(USARTx_ptr(USARTHandle.USARTx)->SR, USART_SR_TXE))
			;

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if (USARTHandle.USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
			USARTx_ptr(USARTHandle.USARTx)->DR = (*pdata & (uint16_t) 0x01FF);

			//check for USART_ParityControl
			if (USARTHandle.USART_Config.USART_ParityControl
					== USART_PARITY_DISABLE) {
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
				pTxBuffer++;
			} else {
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
			}
		} else {
			//This is 8bit data transfer
			USARTx_ptr(USARTHandle.USARTx)->DR = (*pTxBuffer & (uint8_t) 0xFF);

			//Implement the code to increment the buffer address
			pTxBuffer++;
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while (!GET_BIT_N(USARTx_ptr(USARTHandle.USARTx)->SR, USART_SR_TC))
		;
}

/*********************************************************************
 * @fn      		  - USART_ReceiveData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_ReceiveData(USART_Handle_t USARTHandle, uint8_t *pRxBuffer,
		uint32_t Len) {
	//Loop over until "Len" number of bytes are transferred
	for (uint32_t i = 0; i < Len; i++) {
		//Implement the code to wait until RXNE flag is set in the SR
		while (!GET_BIT_N(USARTx_ptr(USARTHandle.USARTx)->SR, USART_SR_RXNE))
			;

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if (USARTHandle.USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if (USARTHandle.USART_Config.USART_ParityControl
					== USART_PARITY_DISABLE) {
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (USARTx_ptr(USARTHandle.USARTx)->DR
						& (uint16_t) 0x01FF);

				//Now increment the pRxBuffer two times
				pRxBuffer++;
				pRxBuffer++;
			} else {
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				*pRxBuffer = (USARTx_ptr(USARTHandle.USARTx)->DR
						& (uint8_t) 0xFF);
				pRxBuffer++;
			}
		} else {
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if (USARTHandle.USART_Config.USART_ParityControl
					== USART_PARITY_DISABLE) {
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				*pRxBuffer = (uint8_t) (USARTx_ptr(USARTHandle.USARTx)->DR
						& (uint8_t) 0xFF);
			}

			else {
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				*pRxBuffer = (uint8_t) (USARTx_ptr(USARTHandle.USARTx)->DR
						& (uint8_t) 0x7F);

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
		}
	}

}

/*********************************************************************
 * @fn      		  - USART_SendDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t USART_SendDataIT(USART_Handle_t USARTHandle, uint8_t *pTxBuffer,
		uint32_t Len) {
	uint8_t txstate = USARTHandle.TxBusyState;

	if (txstate != USART_BUSY_IN_TX) {
		USARTHandle.TxLen = Len;
		USARTHandle.pTxBuffer = pTxBuffer;
		USARTHandle.TxBusyState = USART_BUSY_IN_TX;

		SET_KBITS(USARTx_ptr(USARTHandle.USARTx)->CR1, 2, USART_CR1_TCIE);//Enable TCIE and TXEIE
		//Implement the code to enable interrupt for TXE and TC
	}
	return txstate;
}

/*********************************************************************
 * @fn      		  - USART_ReceiveDataWithIT
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t USARTHandle, uint8_t *pRxBuffer,
		uint32_t Len) {
	uint8_t rxstate = USARTHandle.RxBusyState;

	if (rxstate != USART_BUSY_IN_RX) {
		USARTHandle.RxLen = Len;
		USARTHandle.pRxBuffer = pRxBuffer;
		USARTHandle.RxBusyState = USART_BUSY_IN_RX;

		(void) USARTx_ptr(USARTHandle.USARTx)->DR;

		//Implement the code to enable interrupt for RXNE
		SET_BIT_N(USARTx_ptr(USARTHandle.USARTx)->CR1, USART_CR1_RXNEIE);
	}

	return rxstate;
}

/*********************************************************************
 * @fn      		  - USART_ClearFlag
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              - Applicable to only USART_CTS_FLAG , USART_LBD_FLAG
 * USART_TC_FLAG,USART_TC_FLAG flags
 *

 */

void USART_ClearFlag(uint8_t USARTx, uint16_t StatusFlagName) {
	USARTx_ptr(USARTx)->SR &= ~(StatusFlagName);

}

/*********************************************************************
 * @fn      		  - USART_IRQInterruptConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t State) {
	NVIC_INTR_CTRL(IRQNumber, State);
}

/*********************************************************************
 * @fn      		  - USART_IRQPriorityConfig
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
	NVIC_INTR_PR_CTRL(IRQNumber, IRQPriority);
}

/*********************************************************************
 * @fn      		  - USART_IRQHandler
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
static void USART_PE_EV(USART_Handle_t USARTHandle) {

}
static void USART_FE_EV(USART_Handle_t USARTHandle) {
	/*
	 This bit is set by hardware when a de-synchronization, excessive noise or a break character
	 is detected. It is cleared by a software sequence (an read to the USART_SR register
	 followed by a read to the USART_DR register).
	 */
	USART_ApplicationEventCallback(USARTHandle, USART_ERR_FE);
}
static void USART_NF_EV(USART_Handle_t USARTHandle) {
	/*
	 This bit is set by hardware when noise is detected on a received frame. It is cleared by a
	 software sequence (an read to the USART_SR register followed by a read to the
	 USART_DR register).
	 */
	USART_ApplicationEventCallback(USARTHandle, USART_ERR_NE);
}
static void USART_ORE_EV(USART_Handle_t USARTHandle) {
	//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

	//this interrupt is because of Overrun error
	USART_ApplicationEventCallback(USARTHandle, USART_ERR_ORE);

}
static void USART_IDLE_EV(USART_Handle_t USARTHandle) {
	//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
	CLR_BIT_N(USARTx_ptr(USARTHandle.USARTx)->SR,USART_SR_IDLE);

	//this interrupt is because of idle
	USART_ApplicationEventCallback(USARTHandle, USART_EVENT_IDLE);
}
static void USART_RXNE_EV(USART_Handle_t USARTHandle) {
	if (USARTHandle.RxBusyState == USART_BUSY_IN_RX) {
		if (USARTHandle.RxLen > 0) {
			//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if (USARTHandle.USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
				//We are going to receive 9bit data in a frame

				//Now, check are we using USART_ParityControl control or not
				if (USARTHandle.USART_Config.USART_ParityControl
						== USART_PARITY_DISABLE) {
					//No parity is used , so all 9bits will be of user data

					//read only first 9 bits so mask the DR with 0x01FF
					*((uint16_t*) USARTHandle.pRxBuffer) =
							(USARTx_ptr(USARTHandle.USARTx)->DR
									& (uint16_t) 0x01FF);

					//Now increment the pRxBuffer two times
					USARTHandle.pRxBuffer++;
					USARTHandle.pRxBuffer++;
					USARTHandle.RxLen -= 2;
				} else {
					//Parity is used, so 8bits will be of user data and 1 bit is parity
					*((uint16_t*) USARTHandle.pRxBuffer) =
							(USARTx_ptr(USARTHandle.USARTx)->DR & (uint8_t) 0xFF);
					USARTHandle.pRxBuffer++;
					USARTHandle.RxLen -= 1;
				}
			} else {
				//We are going to receive 8bit data in a frame

				//Now, check are we using USART_ParityControl control or not
				if (USARTHandle.USART_Config.USART_ParityControl
						== USART_PARITY_DISABLE) {
					//No parity is used , so all 8bits will be of user data

					//read 8 bits from DR
					*((uint16_t*) USARTHandle.pRxBuffer) =
							(uint8_t) (USARTx_ptr(USARTHandle.USARTx)->DR
									& (uint8_t) 0xFF);

				}

				else {
					//Parity is used, so , 7 bits will be of user data and 1 bit is parity

					//read only 7 bits , hence mask the DR with 0X7F
					*((uint16_t*) USARTHandle.pRxBuffer) =
							(uint8_t) (USARTx_ptr(USARTHandle.USARTx)->DR
									& (uint8_t) 0x7F);

				}

				//Now , increment the pRxBuffer
				USARTHandle.pRxBuffer++;
				USARTHandle.RxLen -= 1;
			}

		}				//if of >0

		if (!USARTHandle.RxLen) {
			//disable the rxne
			USARTx_ptr(USARTHandle.USARTx)->CR1 &= ~(1 << USART_CR1_RXNEIE);
			USARTHandle.RxBusyState = USART_READY;
			USART_ApplicationEventCallback(USARTHandle,
			USART_EVENT_RX_CMPLT);
		}
	}
}
static void USART_TC_EV(USART_Handle_t USARTHandle) {
	//close transmission and call application callback if TxLen is zero
	if (USARTHandle.TxBusyState == USART_BUSY_IN_TX) {
		//Check the TxLen . If it is zero then close the data transmission
		if (!USARTHandle.TxLen) {
			//Implement the code to clear the TC flag
			USARTx_ptr(USARTHandle.USARTx)->SR &= ~(1 << USART_SR_TC);

			//Implement the code to clear the TCIE control bit

			//Reset the application state
			USARTHandle.TxBusyState = USART_READY;

			//Reset Buffer address to NULL
			USARTHandle.pTxBuffer = NULL;

			//Reset the length to zero
			USARTHandle.TxLen = 0;

			//Call the application call back with event USART_EVENT_TX_CMPLT
			USART_ApplicationEventCallback(USARTHandle,
			USART_EVENT_TX_CMPLT);
		}
	}
}
static void USART_TXE_EV(USART_Handle_t USARTHandle) {
	uint16_t *pdata;
	if (USARTHandle.TxBusyState == USART_BUSY_IN_TX) {
		//Keep sending data until Txlen reaches to zero
		if (USARTHandle.TxLen > 0) {
			//Check the USART_WordLength item for 9BIT or 8BIT in a frame
			if (USARTHandle.USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
				//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
				pdata = (uint16_t*) USARTHandle.pTxBuffer;
				USARTx_ptr(USARTHandle.USARTx)->DR =
						(*pdata & (uint16_t) 0x01FF);

				//check for USART_ParityControl
				if (USARTHandle.USART_Config.USART_ParityControl
						== USART_PARITY_DISABLE) {
					//No parity is used in this transfer , so 9bits of user data will be sent
					//Implement the code to increment pTxBuffer twice
					USARTHandle.pTxBuffer++;
					USARTHandle.pTxBuffer++;
					USARTHandle.TxLen -= 2;
				} else {
					//Parity bit is used in this transfer . so 8bits of user data will be sent
					//The 9th bit will be replaced by parity bit by the hardware
					USARTHandle.pTxBuffer++;
					USARTHandle.TxLen -= 1;
				}
			} else {
				//This is 8bit data transfer
				USARTx_ptr(USARTHandle.USARTx)->DR = (*USARTHandle.pTxBuffer
						& (uint8_t) 0xFF);

				//Implement the code to increment the buffer address
				USARTHandle.pTxBuffer++;
				USARTHandle.TxLen -= 1;
			}

		}
		if (USARTHandle.TxLen == 0) {
			//TxLen is zero
			//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
			USARTx_ptr(USARTHandle.USARTx)->CR1 &= ~(1 << USART_CR1_TXEIE);
		}
	}

}
static void USART_LBD_EV(USART_Handle_t USARTHandle) {

}
static void USART_CTS_EV(USART_Handle_t USARTHandle) {
	//Implement the code to clear the CTS flag in SR
	USARTx_ptr(USARTHandle.USARTx)->SR &= ~(1 << USART_SR_CTS);

	//this interrupt is because of cts
	USART_ApplicationEventCallback(USARTHandle, USART_EVENT_CTS);
}
void USART_IRQHandling(USART_Handle_t USARTHandle) {
	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	//We dont discuss multibuffer communication in this course. please refer to the RM
	//The blow code will get executed in only if multibuffer mode is used.
	void (*fptr[])(USART_Handle_t USARTHandle)= {
		USART_PE_EV,
		USART_FE_EV,
		USART_NF_EV,
		USART_ORE_EV,
		USART_IDLE_EV,
		USART_RXNE_EV,
		USART_TC_EV,
		USART_TXE_EV,
		USART_LBD_EV,
		USART_CTS_EV,
	};
	fptr[GetLSBSetBit(USARTx_ptr(USARTHandle.USARTx)->SR)](USARTHandle);
}

/*********************************************************************
 * @fn      		  - USART_ApplicationEventCallback
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
__weak void USART_ApplicationEventCallback(USART_Handle_t USARTHandle,
		uint8_t event) {

}
